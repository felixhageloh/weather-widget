// usage:
// node get-weather.js [city] [region] [units] [useStatic] [staticCoords] [lang] [geoipkey] [weatherapikey]

process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;

var http = require('http'),
    https = require('https'),
    query = require('querystring');

var options = {
    city: process.argv[2],
    region: process.argv[3],
    units: process.argv[4].toLowerCase(),
    static: process.argv[5] === 'static',
    coords: process.argv[6],
    lang: process.argv[7],
    geoipApiKey: process.argv[8],
    forecastApiKey: process.argv[9]
};

var weatherRetryCounter = 0;

getLocation(function(location) {
    if (location.city) {
        options.region = location.region_name;
        options.city = location.city;
        options.coords = location.latitude + ',' + location.longitude;
    }

    getWeather(options, function(data) {
        retryGetWeatherOrPrintResults(data);
    });
});

function getLocation(callback) {
    if (options.static) return callback({});

    var url = "http://api.ipstack.com/check";
    var params = {
        access_key : options.geoipApiKey,
        language : "en",
        output: "json"
    };

    var request = getJSON(url, params, callback);

    request.on('error', function() {
        callback({})
    });
    setTimeout(function() {
        request.abort();
    }, 3000);
}

function printResults(data) {
    data.location = options.city + ', ' + options.region;
    console.log(JSON.stringify(data));
}

function retryGetWeatherOrPrintResults(data) {
    if (data == null && weatherRetryCounter < 5) {
        weatherRetryCounter++;
        getWeather(options, function(data) {
            retryGetWeatherOrPrintResults(data);
        });
    } else {
        printResults(data || {});
    }
}

function getWeather(options, callback) {
    var geo = options.latitude + "," + options.longitude;
    var exclude  = "minutely,hourly,alerts,flags";

    var url = "https://api.darksky.net/forecast/" + options.forecastApiKey + "/" + options.coords;
    var params = {
        units : options.units,
        lang: options.lang,
        exclude: exclude
    };

    var request = getJSON(url, params, function(data) {
        callback(data);
    });

    request.on('error', function(e) {
        callback({
            error: e.message
        });
    });
}

function getJSON(url, params, callback) {
    if (arguments.length == 2) {
        callback = params;
        params = {};
    }

    var protocol = /^https:/.test(url) ? https : http,
        querystring = query.stringify(params);

    if (querystring)
        url = url + '?' + querystring;

    var json = "",
        result;

    return protocol.get(url, function(res) {
        res.on('data', function(chunk) {
            json += chunk;
        });
        res.on('end', function() {
            try {
                result = JSON.parse(json);
            } catch (e) {
                result = {
                    error: e.message
                };
            }
            callback(result);
        });
    });
}
