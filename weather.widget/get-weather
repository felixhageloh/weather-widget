// usage:
// node get-weather.js [city] [region] [units] [lang] [static] [geoipApiKey] [geolocationApiKey] [forecastApiKey]

// process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;

const query = require('querystring');
const assert = require('assert');

const OPTIONS = {
  city: process.argv[2],
  region: process.argv[3],
  units: process.argv[4].toLowerCase(),
  lang: process.argv[5],
  static: process.argv[6] === 'static',
  geoipApiKey: process.argv[7],
  geolocationApiKey: process.argv[8],
  forecastApiKey: process.argv[9],
};

const GEOIP_API = {
  schemehostpath: 'http://api.ipstack.com/check',
  params: {
    access_key: OPTIONS.geoipApiKey,
    language: 'en',
    output: 'json',
  },
};

const GEOLOCATION_API = {
  schemehostpath: 'https://api.opencagedata.com/geocode/v1/json',
  params: {
    q: `${OPTIONS.city},${OPTIONS.region}`,
    key: OPTIONS.geolocationApiKey,
  },
};

const WEATHER_API = {
  schemehostpath: `https://api.darksky.net/forecast/${OPTIONS.forecastApiKey}/`,  // + geo
  params: {
    units: OPTIONS.units,
    lang: OPTIONS.lang,
    exclude: 'minutely,hourly,alerts,flags',
  },
};

const get = ({ schemehostpath, params }) => {
  const querystring = query.stringify(params);
  const url = schemehostpath + (querystring ? '?' + querystring : '');

  return new Promise((resolve, reject) => {
    const lib = url.startsWith('https') ? require('https') : require('http');
    const request = lib.get(url, response => {
      if (response.statusCode < 200 || response.statusCode > 299) {
        reject(new Error(
          `Failed to load page, status code: ${response.statusCode}
          ${response}`
        ))
      }
      const body = [];
      response.on('data', chunk => body.push(chunk));
      response.on('end', () => resolve(body.join('')));
    });
    request.on('error', err => reject(err));
  })
};

const getGeoIP = async () => {
  // {"ip":"50.242.117.125","type":"ipv4","continent_code":"NA","continent_name":"North America","country_code":"US","country_name":"United States","region_code":"CA","region_name":"California","city":"Union City","zip":"94587","latitude":37.589,"longitude":-122.0461,"location":{"geoname_id":5404555,"capital":"Washington D.C.","languages":[{"code":"en","name":"English","native":"English"}],"country_flag":"http:\/\/assets.ipstack.com\/flags\/us.svg","country_flag_emoji":"\ud83c\uddfa\ud83c\uddf8","country_flag_emoji_unicode":"U+1F1FA U+1F1F8","calling_code":"1","is_eu":false}}
  return OPTIONS.static
    ? OPTIONS
    : get(GEOIP_API)
      .then(data => {
        const { city, region_name: region, location: { languages: [{ code: lang }] }, latitude, longitude } = JSON.parse(data);
        return { city, region, lang, latitude, longitude };
      })
      .catch(e => { throw e });
};

const getGeoLocation = () => {
  // {"documentation":"https://opencagedata.com/api",...,"results":[{"annotations":{...},...,"formatted":"Carlton North VIC 3054, Australia","geometry":{"lat":-37.7845585,"lng":144.9728553}},...],"status":{"code":200,"message":"OK"},...,"thanks":"For using an OpenCage Data API","timestamp":{"created_http":"Wed, 06 Mar 2019 04:03:45 GMT","created_unix":1551845025},"total_results":2}
  return get(GEOLOCATION_API)
    .then(data => {
      const { results: [{ geometry: { lat: latitude, lng: longitude } }] } = JSON.parse(data);
      const { city, region } = OPTIONS;
      return { city, region, lang: 'en', latitude, longitude };
    })
    .catch(e => { throw e });
};

const getWeather = ({ city, region, lang, latitude, longitude }) => {
  // {..,"currently":{"time":1551856440,"summary":"Overcast","icon":"cloudy",...},"daily":{...},"offset":-5}
  const { schemehostpath, params } = WEATHER_API;
  return get({ schemehostpath: `${schemehostpath}${latitude},${longitude}`, params })
    .then(data => {
      return { ...(JSON.parse(data)), location: `${city}, ${region}` }
    })
    .catch(e => { throw e });
};

const printResults = json_data => console.log(JSON.stringify(json_data));

getGeoIP()
  .catch(getGeoLocation)
  .then(getWeather)
  .then(printResults)
  .catch(e => console.log(e));
