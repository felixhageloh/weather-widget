// usage:
// node get-weather.js [city] [region] [units] [lang] [static] [geoipApiKey] [geolocationApiKey] [forecastApiKey]

const query = require('querystring');

const OPTIONS = {
  city: process.argv[2],
  region: process.argv[3],
  units: process.argv[4].toLowerCase(),
  lang: process.argv[5],
  static: process.argv[6] === 'static',
  geoipApiKey: process.argv[7],
  geolocationApiKey: process.argv[8],
  forecastApiKey: process.argv[9],
};

const GEOIP_API = {
  schemehostpath: 'http://ip-api.com/json/',
  params: {},
  transform: (data) => {
    // {..."city":"Berkeley",...,"lat":37.8664,"lon":-122.257,...,"regionName":"California",...}
    const { city, region, lat: latitude, lon: longitude } = JSON.parse(data);
    return { city, region, lang: 'en', latitude, longitude };
  },
};

// const GEOIP_API = {
//   schemehostpath: 'http://api.ipstack.com/check',
//   params: {
//     access_key: OPTIONS.geoipApiKey,
//     language: 'en',
//     output: 'json',
//   },
//   transform: data => {
//     // {"ip":"50.242.117.125",...,"region_name":"California","city":"Union City",...,"latitude":37.589,"longitude":-122.0461,"location":{...,"languages":[{"code":"en",...}]...}}
//     const { city, region_name: region, location: { languages: [{ code: lang }] }, latitude, longitude } = JSON.parse(data);
//     return { city, region, lang, latitude, longitude };
//   },
// };

const GEOLOCATION_API = {
  schemehostpath: 'https://api.opencagedata.com/geocode/v1/json',
  params: {
    q: `${OPTIONS.city},${OPTIONS.region}`,
    key: OPTIONS.geolocationApiKey,
  },
  transform: data => {
    // {"documentation":"https://opencagedata.com/api",...,"results":[{...,"geometry":{"lat":-37.7845585,"lng":144.9728553}},...],...,"thanks":"For using an OpenCage Data API",...}
    const { results: [{ geometry: { lat: latitude, lng: longitude } }] } = JSON.parse(data);
    const { city, region } = OPTIONS;
    return { city, region, lang: 'en', latitude, longitude };
  },
};

const WEATHER_API = {
  schemehostpath: `https://api.darksky.net/forecast/${OPTIONS.forecastApiKey}/`,  // + geo
  params: {
    units: OPTIONS.units,
    lang: OPTIONS.lang,
    exclude: 'minutely,hourly,alerts,flags',
  },
  transform: (data, city, region) => {
    // {..,"currently":{"time":1551856440,"summary":"Overcast","icon":"cloudy",...},"daily":{...},"offset":-5}
    return { ...(JSON.parse(data)), location: `${city}, ${region}` };
  }
};

const get = ({ schemehostpath, params }) => {
  const querystring = query.stringify(params);
  const url = schemehostpath + (querystring ? '?' + querystring : '');

  return new Promise((resolve, reject) => {
    const lib = url.startsWith('https') ? require('https') : require('http');
    const request = lib.get(url, response => {
      let body = '';
      response.on('data', chunk => body += chunk);
      response.on('end', () => {
        if (response.statusCode < 200 || response.statusCode > 299) {
          reject(new Error((`Request failed: ${response.statusCode} ${response.statusMessage}
                            ${body}`).replace(/^ {2,}/gm,'')));
        }
        else resolve(body);
      })
    });
    request.on('error', err => reject(err));
  });
};

const getGeoIP = async () => OPTIONS.static ? OPTIONS : GEOIP_API.transform(await get(GEOIP_API));

const getGeoLocation = async () => GEOLOCATION_API.transform(await get(GEOLOCATION_API))

const getWeather = async ({ city, region, lang, latitude, longitude }) => {
  const { schemehostpath, params } = WEATHER_API;
  const data = await get({ schemehostpath: `${schemehostpath}${latitude},${longitude}`, params });

  return WEATHER_API.transform(data, city, region)
};

const printResults = jsonData => console.log(JSON.stringify(jsonData));

getGeoIP()
  .catch(getGeoLocation)
  .then(getWeather)
  .then(printResults)
  .catch(e => console.log(e));
