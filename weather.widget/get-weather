// usage:
// node get-weather.js [city] [region] [units] [lang] [geoipkey] [weatherapikey]

// process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;

const query = require('querystring');
const assert = require('assert');

const options = {
      city: process.argv[2],
      region: process.argv[3],
      units: process.argv[4].toLowerCase(),
      lang: process.argv[5],
      static: process.argv[6] === 'static',
      geoipApiKey: process.argv[7],
      geolocationApiKey: process.argv[8],
      forecastApiKey: process.argv[9],
      debug: process.argv[10] === 'debug'
};

const GEOIP_API = {
  schemehostpath: "http://api.ipstack.com/check",
  params: {
    access_key : options.geoipApiKey,
    language: "en",
    output: "json"
  }
}
const GEOLOCATION_API = {
  schemehostpath: "https://api.opencagedata.com/geocode/v1/json",
  params: {
    q: options.city + "," + options.region,
    key: options.geolocationApiKey,
  }
}
const WEATHER_API = {
  schemehostpath: "https://api.darksky.net/forecast/" + options.forecastApiKey + "/",  // + geo
  params: {
    units: options.units,
    lang: options.lang,
    exclude: "minutely,hourly,alerts,flags",
  }
}

const get = ({schemehostpath, params}) => {
  const querystring = query.stringify(params);
  const url = schemehostpath + (querystring ? '?' + querystring : '');

  return new Promise((resolve, reject) => {
    const lib = url.startsWith('https') ? require('https') : require('http');
    if (options.debug) { console.log('get: ' + url + '\n') }  // TODO
    const request = lib.get(url, (response) => {
      if (response.statusCode < 200 || response.statusCode > 299) {
         reject(new Error('Failed to load page, status code: ' + response.statusCode + '\n' + response));
       }
      const body = [];
      response.on('data', (chunk) => body.push(chunk));
      response.on('end', () => resolve(body.join('')));
    });
    request.on('error', (err) => reject(err))
    })
};

const wait = (duration) => {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, duration)
  })
}


const getGeoIP = () => {
  // {"ip":"50.242.117.125","type":"ipv4","continent_code":"NA","continent_name":"North America","country_code":"US","country_name":"United States","region_code":"CA","region_name":"California","city":"Union City","zip":"94587","latitude":37.589,"longitude":-122.0461,"location":{"geoname_id":5404555,"capital":"Washington D.C.","languages":[{"code":"en","name":"English","native":"English"}],"country_flag":"http:\/\/assets.ipstack.com\/flags\/us.svg","country_flag_emoji":"\ud83c\uddfa\ud83c\uddf8","country_flag_emoji_unicode":"U+1F1FA U+1F1F8","calling_code":"1","is_eu":false}}
  return new Promise((resolve, reject) => {
    if (options.static) {
      resolve(options);
    } else {
      get(GEOIP_API)
        .then(data => {
          if (options.debug) {
            console.log('getGeoIP');  // TODO
            console.log(data);  // TODO
            console.log(JSON.parse(data));  // TODO
            console.log('---')  // TODO
          }
          const {city, region_name: region, location: {languages: [{code: lang}]}, latitude, longitude} = JSON.parse(data)
          assert(city)
          assert(region)
          assert(lang)
          assert(latitude)
          assert(longitude)
          resolve({city, region, lang, latitude, longitude});
        })
        .catch(err => { reject(err)  });
    }
  })
}

const getGeoLocation = (err) => {
  // {"documentation":"https://opencagedata.com/api",...,"results":[{"annotations":{...},...,"formatted":"Carlton North VIC 3054, Australia","geometry":{"lat":-37.7845585,"lng":144.9728553}},...],"status":{"code":200,"message":"OK"},...,"thanks":"For using an OpenCage Data API","timestamp":{"created_http":"Wed, 06 Mar 2019 04:03:45 GMT","created_unix":1551845025},"total_results":2}
  return new Promise((resolve, reject) => {
    if (options.debug) { console.log('getGeoIP failed: ' + err) }
    get(GEOLOCATION_API)
      .then(data => {
        if (options.debug) {
          console.log('getGeoLocation');  // TODO
          console.log(data);  // TODO
          console.log(JSON.parse(data));  // TODO
          console.log('---')  // TODO
        }
        const {results: [{ geometry: {lat: latitude, lng: longitude} }]} = JSON.parse(data)
        const {city, region} = options
        assert(city)
        assert(region)
        assert(latitude)
        assert(longitude)
        resolve({city, region, lang: 'en', latitude, longitude});
      })
      .catch(err => { reject(err)  });
  })
}

const getWeather = ({city, region, lang, latitude, longitude}) => {
  // {..,"currently":{"time":1551856440,"summary":"Overcast","icon":"cloudy",...},"daily":{...},"offset":-5}
  return new Promise((resolve, reject) => {
    const {schemehostpath, params} = WEATHER_API
    get({schemehostpath: schemehostpath + latitude + ',' + longitude, params})
      .then(data => {
        if (options.debug) {
          console.log('getWeather');  // TODO
          console.log(data);  // TODO
          console.log(Object.assign(JSON.parse(data), { location: city + ', ' + region }));  // TODO
          console.log('---')  // TODO
        }
        const out = Object.assign(JSON.parse(data), { location: city + ', ' + region });
        resolve(out);
      })
      .catch(err => { reject(err)  });
  })
}

const printResults = (json_data) => {
  return new Promise((resolve, reject) => {
    if (options.debug) { console.log('Final data:\n' + json_data + '\n' + 'Final output:') }
    if (json_data) { 
      console.log(JSON.stringify(json_data))
      resolve()
    } else {
      reject('No data arrived!')
    }
  })
}

getGeoIP()
  .catch(getGeoLocation)
  .then(getWeather)
  .then(printResults)
  .catch(e => { console.log(e) })
