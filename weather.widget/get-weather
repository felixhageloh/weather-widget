// usage:
// node get-weather [city] [region] [units] [lang] [posapikey] [geoipapikey] [weatherapikey]

process.env.NODE_TLS_REJECT_UNAUTHORIZED = 1;

var http = require('http'),
    https = require('https'),
    query = require('querystring');

var options = {
    city: process.argv[2],
    region: process.argv[3],
    units: process.argv[4].toLowerCase(),
    static: process.argv[5] === 'static',
    lang: process.argv[6],
    posApiKey: process.argv[7],
    geoipApiKey: process.argv[8],
    weatherApiKey: process.argv[9]
};

var weatherRetryCounter = 0;

getPosition(function(position) {
    if (position.data
            && position.data.length > 0) {
        var pos = position.data[0];
        options.latitude = pos.latitude;
        options.longitude = pos.longitude;
    }

    getLocation(function(location) {
        if (location.city) {
            options.region = location.region_name;
            options.city = location.city;
            options.latitude = location.latitude;
            options.longitude = location.longitude;
        }

        getWeather(options, function(data) {
            retryGetWeatherOrPrintResults(data);
        });
    });
});

function getPosition(callback) {
    if (!options.static) return callback({data:[]});

    var url = 'http://api.positionstack.com/v1/forward';
    var params = {
        query: options.city + ',' + options.region,
        access_key: options.posApiKey,
        output: 'json'
    };

    var request = getJSON(url, params, callback);

    setTimeout(function(){
        request.abort();
    }, 3000)
}

function getLocation(callback) {
    if (options.static) return callback({});

    var url = 'http://api.ipstack.com/check';
    var params = {
        access_key: options.geoipApiKey,
        language: 'en',
        output: 'json'
    };

    var request = getJSON(url, params, callback);

    setTimeout(function() {
        request.abort();
    }, 3000);
}

function printResults(data) {
    data.location = options.city + ', ' + options.region;
    console.log(JSON.stringify(data));
}

function retryGetWeatherOrPrintResults(data) {
    var results = null;
    try {
        results = data.query.results;
    } catch (ignore) { }

    if (results == null && weatherRetryCounter < 5) {
        weatherRetryCounter++;
        getWeather(options, function(data) {
            retryGetWeatherOrPrintResults(data);
        });
    } else {
        printResults(data || {});
    }
}

function getWeather(options, callback) {
    var url = 'https://api.openweathermap.org/data/2.5/onecall';
    var params = {
        appid: options.weatherApiKey,
        lat: options.latitude,
        lon: options.longitude,
        units: options.units,
        lang: options.lang
    };

    getJSON(url, params, function(data) {
        callback(data);
    });
}

function getJSON(url, params, callback) {
    if (arguments.length == 2) {
        callback = params;
        params = {};
    }

    var protocol = /^https:/.test(url) ? https : http,
        querystring = query.stringify(params);

    if (querystring)
        url = url + '?' + querystring;

    var json = '',
        result;

    return protocol.get(url, function(res) {
        res.on('data', function(chunk) {
            json += chunk;
        });
        res.on('end', function() {
            try {
                result = JSON.parse(json);
            } catch (e) {
                result = {
                    error: e.message
                };
            }
            callback(result);
        });
        res.on('error', function(e){
            callback({
                error: e.message
            });
        })
    });
}
